<?xml version="1.0" encoding="UTF-8"?>
<!--
definitions: Es el elemento raíz del archivo WSDL. 
Define el espacio de nombres, el nombre del servicio y otras configuraciones generales.
En este caso, el targetNamespace define el espacio de nombres objetivo del servicio, 
y name es el nombre del servicio.
-->
<definitions xmlns="http://schemas.xmlsoap.org/wsdl/"
             xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
             xmlns:tns="http://miwebservice.com/servicio"
             xmlns:xsd="http://www.w3.org/2001/XMLSchema"
             targetNamespace="http://miwebservice.com/servicio"
             name="ServicioCliente">

    <!-- Tipos de datos -->
    <!--
    types: Define los tipos de datos que se utilizarán en el servicio. 
    En este ejemplo, se define una estructura compleja (complexType) con los elementos clienteID 
    y tipoSolicitud para la solicitud, y nombreCliente y estadoCuenta para la respuesta.
     -->
    <types>
        <xsd:schema targetNamespace="http://miwebservice.com/servicio">
            <xsd:element name="solicitudDatos">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="clienteID" type="xsd:string"/>
                        <xsd:element name="tipoSolicitud" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="respuestaDatos">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="nombreCliente" type="xsd:string"/>
                        <xsd:element name="estadoCuenta" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </xsd:schema>
    </types>

    <!-- Mensajes -->
    <!-- 
    message: Define los mensajes que serán enviados o recibidos por el servicio. 
    Un mensaje puede contener una o más partes, que hacen referencia a los elementos definidos en la sección types.
    En este ejemplo, hay un mensaje para la solicitud (SolicitudDatosRequest) y otro para la respuesta (SolicitudDatosResponse).
    -->
    <message name="SolicitudDatosRequest">
        <part name="parameters" element="tns:solicitudDatos"/>
    </message>
    <message name="SolicitudDatosResponse">
        <part name="parameters" element="tns:respuestaDatos"/>
    </message>

    <!-- Puerto/Operaciones -->
    <!--
    portType: Define las operaciones disponibles para el servicio. 
    Cada operación tiene un mensaje de entrada (input) y uno de salida (output). 
    Aquí se define la operación obtenerDatosCliente.
    -->
    <portType name="ServicioClientePortType">
        <operation name="obtenerDatosCliente">
            <input message="tns:SolicitudDatosRequest"/>
            <output message="tns:SolicitudDatosResponse"/>
        </operation>
    </portType>

    <!-- Enlace/Binding -->
    <!--
    binding: Define cómo se va a transmitir el servicio. En este ejemplo, 
    el tipo de enlace es SOAP sobre HTTP, con el estilo de documento (document)
    y un soapAction que especifica la URL asociada a la operación.
     -->
    <binding name="ServicioClienteSoapBinding" type="tns:ServicioClientePortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="obtenerDatosCliente">
            <soap:operation soapAction="http://miwebservice.com/servicio/obtenerDatosCliente"/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
        </operation>
    </binding>

    <!-- 
    En un documento WSDL podemos especificar dos estilos de enlazado: document o RPC. La
    selección que hagamos influirá en cómo se transmitan los mensajes dentro de las
    peticiones y respuestas SOAP. Por ejemplo, un mensaje SOAP con estilo document podría ser:

    <SOAP-ENV:Body>
        <producto>
            <codigo>KFDJHFHSJ</codigo>
        </producto>
    </SOAP-ENV:Body>

   Y un mensaje con estilo RPC sería por ejemplo:

    <SOAP-ENV:Body>
        <ns1:getPVP>
            <param0 xsi:type="xsd:string">KFDJHFHSJ</param0>
        </ns1:getPVP>
    </SOAP-ENV:Body>

    El estilo de enlazado RPC está más orientado a sistemas de petición y respuesta que el
    document (más orientado a la transmisión de documentos en formato XML). En este estilo de
    enlazado, cada elemento message de WSDL debe contener un elemento part por cada
    parámetro (de entrada o de salida), y dentro de éste indicar el tipo de datos del parámetro
    mediante un atributo type, como se muestra en el ejemplo anterior.
    Además, cada estilo de enlazado puede ser de tipo encoded o literal (aunque en realidad la
    combinación document/encoded no se utiliza). Al indicar encoded, estamos diciendo que vamos
    a usar un conjunto de reglas de codificación, como las que se incluyen en el propio
    protocolo SOAP (espacio de nombres "http://schemas.xmlsoap.org/soap/encoding/"), para
    convertir en XML los parámetros de las peticiones y respuestas.
    El ejemplo anterior de RPC es en realidad RPC/encoded. Un ejemplo de un mensaje SOAP con
    estilo RPC/literal sería:

    <SOAP-ENV:Body>
        <ns1:getPVP>
            <param0>KFDJHFHSJ</param0>
        </ns1:getPVP>
    </SOAP-ENV:Body>


    Ejemplo de binding: RPC / Encoded: 

    <binding name="usuarioBinding" type="tns:usuarioPortType">
    <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="getUsuario">
            <soap:operation soapAction="http://localhost/dwes/ut6/getUsuario.php?getUsuario"/>
            <input>
                <soap:body use="encoded"
                    encodingStyle="http://localhost/dwes/ut6/getUsuario.php?getUsuario"
                    namespace="http://localhost/dwes/ut6">
            </input>
            <output>
                <soap:body use="encoded"
                    encodingStyle="http://localhost/dwes/ut6/getUsuario.php?getUsuario"
                    namespace="http://localhost/dwes/ut6">
            </output>
        </operation>
    </binding>
    
    Recuerda añadir en definitions: 
    xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
    -->

    <!-- Servicio -->
    <!-- 
    service: Es el componente final que define el servicio y su dirección (URL). 
    En este caso, el servicio se llama ServicioCliente y se accede en la dirección especificada.
    -->
    <service name="ServicioCliente">
        <port name="ServicioClientePort" binding="tns:ServicioClienteSoapBinding">
            <soap:address location="http://miwebservice.com/servicio/ServicioCliente"/>
        </port>
    </service>

</definitions>


<!-- 
El otro tipo de datos que necesitaremos definir en los documentos WSDL son los arrays.
Para definir un array, no existe en el XML Schema un tipo base adecuado que podamos usar.
En su lugar, se utiliza el tipo Array definido en el esquema enconding de SOAP. Por ejemplo,
podríamos añadir un tipo array de usuarios al documento anterior haciendo:

<xsd:complexType name="ArrayOfUsuario">
    <xsd:complexContenct>
        <xsd:restriction base="soapenv:Array">
            <xsd:attibute ref="soapenv:arrayType" arrayType="tns:usuario[]"/>
        </xsd:restriction>
    </xsd:complexContent>
</xsd:complexType>    


Al definir un array en WSDL, se debe tener en cuenta que:
El atributo arrayType se utiliza para indicar qué elementos contendrá el array.
Se debe añadir al documento el espacio de nombres SOAP encoding:

En definitions: 
xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"

El nombre del array debería ser ArrayOfXXX, dónde XXX es el nombre del tipo de
elementos que contiene el array.
En muchas ocasiones no será necesario definir tipos propios, y por tanto en el documento
WSDL no habrá sección types; será suficiente con utilizar alguno de los tipos propios de XML
Schema, como xsd:string, xsd:float o xsd:boolean.
-->